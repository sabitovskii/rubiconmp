// <auto-generated />
using Geometry.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Geometry.Infrastructure.Data.Migrations
{
    [DbContext(typeof(GeometryDbContext))]
    partial class GeometryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Geometry.Domain.Entities.Rectangle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Rectangles");
                });

            modelBuilder.Entity("Geometry.Domain.Entities.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Geometry.Domain.Entities.Rectangle", b =>
                {
                    b.OwnsOne("Geometry.Domain.Entities.Point", "A", b1 =>
                        {
                            b1.Property<int>("RectangleId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("RectangleId");

                            b1.ToTable("Rectangles");

                            b1.WithOwner()
                                .HasForeignKey("RectangleId");
                        });

                    b.OwnsOne("Geometry.Domain.Entities.Point", "B", b1 =>
                        {
                            b1.Property<int>("RectangleId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("RectangleId");

                            b1.ToTable("Rectangles");

                            b1.WithOwner()
                                .HasForeignKey("RectangleId");
                        });

                    b.OwnsOne("Geometry.Domain.Entities.Point", "C", b1 =>
                        {
                            b1.Property<int>("RectangleId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("RectangleId");

                            b1.ToTable("Rectangles");

                            b1.WithOwner()
                                .HasForeignKey("RectangleId");
                        });

                    b.OwnsOne("Geometry.Domain.Entities.Point", "D", b1 =>
                        {
                            b1.Property<int>("RectangleId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("RectangleId");

                            b1.ToTable("Rectangles");

                            b1.WithOwner()
                                .HasForeignKey("RectangleId");
                        });

                    b.Navigation("A")
                        .IsRequired();

                    b.Navigation("B")
                        .IsRequired();

                    b.Navigation("C")
                        .IsRequired();

                    b.Navigation("D")
                        .IsRequired();
                });

            modelBuilder.Entity("Geometry.Domain.Entities.Segment", b =>
                {
                    b.OwnsOne("Geometry.Domain.Entities.Point", "End", b1 =>
                        {
                            b1.Property<int>("SegmentId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("SegmentId");

                            b1.ToTable("Segments");

                            b1.WithOwner()
                                .HasForeignKey("SegmentId");
                        });

                    b.OwnsOne("Geometry.Domain.Entities.Point", "Start", b1 =>
                        {
                            b1.Property<int>("SegmentId")
                                .HasColumnType("integer");

                            b1.Property<double>("X")
                                .HasColumnType("double precision");

                            b1.Property<double>("Y")
                                .HasColumnType("double precision");

                            b1.HasKey("SegmentId");

                            b1.ToTable("Segments");

                            b1.WithOwner()
                                .HasForeignKey("SegmentId");
                        });

                    b.Navigation("End")
                        .IsRequired();

                    b.Navigation("Start")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
